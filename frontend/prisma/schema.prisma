generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  state      String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  profile    profile[]
  session    session[]
}

model schema_migrations {
  version String @id @db.VarChar(128)
}

model session {
  id         Int      @id @default(autoincrement())
  token      String
  account_id Int
  expire_at  DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  csrf       csrf[]
  account    account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model verification {
  id         Int      @id @default(autoincrement())
  email      String
  token      String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([email], map: "idx_verification_email")
  @@index([token], map: "idx_verification_token")
}

model profile {
  id           Int       @id @default(autoincrement())
  account_id   Int
  first_name   String?
  last_name    String?
  country_code String?   @db.VarChar(2)
  address      String?
  avatar       String?
  updated_at   DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  account      account   @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model csrf {
  id         Int      @id @default(autoincrement())
  token      String
  session_id Int?
  type       Int      @default(0)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  session    session? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
