generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id             Int       @id @default(autoincrement())
  identity_value String
  identity_type  String
  password       String?
  state          String
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime? @db.Timestamptz(6)
  oauth          oauth[]
  profile        profile[]
  session        session[]

  @@unique([identity_value, identity_type])
}

model oauth {
  id            Int      @id @default(autoincrement())
  identity      String
  token         String
  refresh_token String?
  provider      String
  account_id    Int
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  account       account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([identity, provider])
  @@index([account_id], map: "idx_oauth_account_id")
}

model profile {
  id               Int       @id @default(autoincrement())
  account_id       Int
  country_code     String?   @db.VarChar(2)
  region           String?
  city             String?
  postcode         String?
  street_address   String?
  extended_address String?
  username         String?   @unique
  photo            String?
  updated_at       DateTime? @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  account          account   @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([account_id], map: "idx_profile_account_id")
  @@index([country_code], map: "idx_profile_country_code")
}

model schema_migrations {
  version String @id @db.VarChar(128)
}

model session {
  id                                         Int            @id @default(autoincrement())
  session                                    String         @unique
  account_id                                 Int
  expire_at                                  DateTime       @db.Timestamptz(6)
  created_at                                 DateTime       @default(now()) @db.Timestamptz(6)
  account                                    account        @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  verification_verification_sessionTosession verification[] @relation("verification_sessionTosession")

  @@index([account_id], map: "idx_session_account_id")
}

model tag {
  id         Int      @id @default(autoincrement())
  word       String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model verification {
  id                                    Int      @id @default(autoincrement())
  email                                 String?
  code                                  String   @unique
  session                               String?
  created_at                            DateTime @default(now()) @db.Timestamptz(6)
  session_verification_sessionTosession session? @relation("verification_sessionTosession", fields: [session], references: [session], onDelete: Cascade, onUpdate: NoAction)

  @@index([email], map: "idx_verification_email")
  @@index([session], map: "idx_verification_session")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model video {
  id            Int       @id @default(autoincrement())
  account_id    Int
  country_code  String?
  title         String?
  description   String?
  name          String
  type          String
  size          Int
  upload_url    String?
  thumbnail_url String?
  updated_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)

  @@index([account_id], map: "idx_video_account_id")
  @@index([country_code], map: "idx_video_country")
}

model video_tag {
  video_id   Int
  tag_id     Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@id([video_id, tag_id])
}

model countries {
  id           Int    @id @default(autoincrement())
  country_code String @unique @db.VarChar(2)
  country_name String @unique
}
